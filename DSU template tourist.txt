class dsu {
 public:
  vector<int> parent;
  int n;
  vector<int> size;
 
  dsu(int _n) : n(_n) {
    n++;
    parent.resize(n);
    iota(parent.begin(), parent.end(), 0);
    size.assign(n, 1);
  }
 
  inline int get(int x) {
    return (x == parent[x] ? x : (parent[x] = get(parent[x]))); //path compression
  }
 
  inline bool unite(int x, int y) {
    x = get(x);
    y = get(y);
    if(x>y) swap(x,y);  //just so that you can predict in dry run
    if (x != y) {
      if(size[y]>size[x]) swap(x,y); //union by rank (size)
      parent[y] = x;
      size[x] += size[y];
      size[y] = 0;
      return true;
    }
    return false;
  }
};